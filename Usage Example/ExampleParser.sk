options:
    DELIM: ","
    SUPPORTED_VERSIONS: 4

    # If you are in some modern version of minecraft which has renamed sounds then please change the sounds here
    INSTRUMENT_SOUND_PREFIX: "block.note."
    INSTRUMENT_SOUND_LIST: "harp,bass,basedrum,snare,hat,guitar,flute,bell,chime,xylophone,iron_xylophone,cow_bell,didgeridoo,bit,banjo,pling"

# Everything is prefixed 'NBSYAML' so that it does not conflict with other scripts
# If you are on some modern version of minecraft which has renamed sound names
# e.g. block.note -> block.note_block then please look inside function NBSYAML_loadConstants()

function NBSYAML_loadConstants():
    delete {-NBSYAML_CONSTANT::*}

    # All vanilla note block instruments
    set {_sounds::*} to ({@INSTRUMENT_SOUND_LIST}) split at ","
    loop {_sounds::*}:
        set {_index} to loop-index parsed as number - 1
        set {-NBSYAML_CONSTANT::INSTRUMENT_SOUND::%{_index}%} to "%"{@INSTRUMENT_SOUND_PREFIX}"%%loop-value%"

    # Minecraft's 2-octave limit supports 24 semitones, 24 different pitches
    set {_pitch::*} to 0.5, 0.53, 0.56, 0.59, 0.63, 0.67, 0.71, 0.75, 0.79, 0.84, 0.89, 0.94, 1.0, 1.06, 1.12, 1.19, 1.26, 1.33, 1.41, 1.5, 1.59, 1.68, 1.78, 1.89 and 2.0
    loop {_pitch::*}:
        set {_index} to loop-index parsed as number + 32 # 33 to 57
        set {-NBSYAML_CONSTANT::KEY_PITCH::%{_index}%} to loop-value

function NBSYAML_unload():
    delete {-NBSYAML_CONSTANT::*}
    delete {-NBSYAML_SONG::*}

on load:
    NBSYAML_loadConstants()
on skript stop:
    NBSYAML_unload()

function NBSYAML_loadSong(songName: string, file: string, listName: string = "NoteBlockSongData", log: boolean = true) :: string:
    set {_before} to now
    set {_data::*} to yaml list {_listName} from {_file}
    if {_data::1} != {@SUPPORTED_VERSIONS}:
        send "[NBSYAML] Failed to load song %{_songName}%: Song version '%{_data::1}%' not supported" to console
        return "Failed to load song %{_songName}%: Song version '%{_data::1}%' not supported"
    set {-NBSYAML_SONG::%{_songName}%::*} to {_data::*}
    if {_log}:
        send "[NBSYAML] Loaded song '%{_songName}%' in %difference between {_before} and now%" to console
    return "Success"

# volume, tempo, loopValue: <0 to use song data, other value for forced
# if location is not set it will track the first player (pass empty local variable for not set '{_}')
function NBSYAML_playSong(songName: string, players: players, location: location, setVolume: number = -1, setTempo: number = -1, loopInfo: numbers = -1) :: string:
    if {-NBSYAML_SONG::%{_songName}%::*} is not set:
        return "Song is not loaded"
    set {_header::*} to {-NBSYAML_SONG::%{_songName}%::2} split at {@DELIM}
    # Checking if all instruments are loaded
    if {_header::1} parsed as number > {-NBSYAML_CONSTANT::INSTRUMENT_SOUND::*}:
        return "Not enough instruments are loaded to play song"
    if {_setTempo} >= 0:
        set {_tempo} to {_setTempo}
    else:
        set {_tempo} to {_header::2} parsed as number / 100
    set {_waitTicks} to 20 / {_tempo}

    if {_location} is not set:
        set {_location} to {_players::1}

    # Main loop to play song
    set {_index} to 3
    while {-NBSYAML_SONG::%{_songName}%::%{_index}%} is set:
        set {_noteBlock::*} to {-NBSYAML_SONG::%{_songName}%::%{_index}%} split at {@DELIM}
        set {_index} to {_index} + 1
        set {_delay} to {_waitTicks} * {_noteBlock::1} parsed as number
        if {_delay} > 0:
            wait "%{_delay}% tick" parsed as timespan
        set {_sound} to {-NBSYAML_CONSTANT::INSTRUMENT_SOUND::%{_noteBlock::2}%}
        {_sound} is set
        set {_pitch} to {-NBSYAML_CONSTANT::KEY_PITCH::%{_noteBlock::3}%}
        {_pitch} is set
        if {_setVolume} >= 0:
            set {_volume} to {_setVolume}
        else:
            set {_volume} to {_noteBlock::4} parsed as number / 100
        play sound {_sound} with volume {_volume} and pitch {_pitch} at {_location} for {_players::*}
    
    # you can parse loop info by yourself >:OO i am too tired to do this right now
    # i would recommend a recursive call here if you dont want to suffer

command loadsong <string> <string>:
    usage: /loadsong <songname> <songpath>
    # e.g. /loadsong MySong plugins/Skript/song/MySong.yml
    permission: skript.nbsyaml
    trigger:
        set {_result} to NBSYAML_loadSong(arg-1, arg-2)
        send "&aLoad Result: &f%{_result}%" to executor

command playsong <string>:
    usage: /playsong <songname>
    # e.g. /playsong MySong
    permission: skript.nbsyaml
    executable by: players
    trigger:
        set {_result} to NBSYAML_playSong(arg-1, executor, {_})
        if {_result} is set:
            send "&cFailed to load song %arg-1%: &f%{_result}%" to executor
            exit trigger
        send "&aPlaying song %arg-1%" to executor